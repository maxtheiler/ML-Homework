function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%


% Part 1: Feed forward
% Get y into the proper format...
% ... via Lame-ass for loop
#for i = 1:m
#  Y(i,y(i)) = 1
#endfor
% ... or via vectorization!
Y = zeros(max(y),numel(y));
Y((0:numel(y)-1)*max(y)+y') = 1;
Y = Y';

% Transpose Thetas -- see doc for explanation
#Theta1 = Theta1';
#Theta2 = Theta2';
#noBiasTheta1 = Theta1(2:end,:);
#noBiasTheta2 = Theta2(2:end,:);
% Run each example forward through the NN
#a1 = [ones(m,1) X];
#z2 = a1*Theta1;
#a2 = [ones(m,1) sigmoid(z2)];
#z3 = a2*Theta2;
#a3 = sigmoid(z3);
#J = sum(sum((0 - Y).*log(a3) - (1 - Y).*log(1 - a3)))/m + ...
#    lambda/(2*m)*sum([noBiasTheta1(:).^2 ; noBiasTheta2(:).^2]);
% backprop
#delta3 = a3 - Y;
#delta2 = ((delta3*Theta2').*sigmoidGradient([ones(m,1) z2]))(:,2:end);
#D2 = a2'*delta3/m;
#D1 = a1'*delta2/m;
#d1size = size(D1)
#d2size = size(D2)
% regularize D's...
#Theta1_grad = D1 + (lambda/m)*Theta1;
#Theta2_grad = D2 + (lambda/m)*Theta2;
% ... except bias row
#Theta1_grad(1,:) = D1(1,:);
#Theta2_grad(1,:) = D2(1,:);

% Return Thetas to normal
#Theta1 = Theta1';
#Theta2 = Theta2';
#J = 0;

X = [ones(m,1) X];
    a1 = X; % 1 x 401
    z2 = a1 * Theta1'; % 1 x 25
    a2 = [ ones(size(z2, 1)), sigmoid(z2)] ; % 1 x 26
    z3 =  a2 * Theta2'; % 1 x 10
    a3 = sigmoid(z3); % 1 x 10
    J = sum(sum((0 - Y).*log(a3) - (1 - Y).*log(1 - a3)))/m;

    d3 = a3 - yvec'; % 1 x 10
    d2 =  (Theta2' * d3')' .* sigmoidGradient([1 z2]); % 1 x 26
    d2 = d2(2:end); % 1 x 25
    Theta1_grad = Theta1_grad + d2' * a1; % 25 x 401
    Theta2_grad = Theta2_grad + d3' * a2; % 10 x 26

theta1Sum = 0;
theta2Sum = 0;
for j=1:hidden_layer_size
    for k=2:input_layer_size+1
        theta1Sum = theta1Sum + Theta1(j,k).^2;
    end
end
for j=1:num_labels
    for k=2:hidden_layer_size+1
        theta2Sum = theta2Sum + Theta2(j,k).^2;
    end
end

J = J + lambda * (1/2) * (1/m) * (theta1Sum + theta2Sum);
Theta1_grad = (1/m) * Theta1_grad;
Theta2_grad = (1/m) * Theta2_grad;

tmp1 = Theta1_grad(:, 1);
Theta1_grad = Theta1_grad + (lambda/m) * Theta1;
Theta1_grad(:,1) = tmp1;
tmp2 = Theta2_grad(:, 1);
Theta2_grad = Theta2_grad + (lambda/m) * Theta2;
Theta2_grad(:,1) = tmp2;

% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
